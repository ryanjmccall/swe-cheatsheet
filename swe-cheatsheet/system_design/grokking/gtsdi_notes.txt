Key Characterstics of Distributed Systems
S.M.E.A.R.
Scalability
Maintainability
Efficiency
Availability
Reliability

Scalability
- support demand without perf loss
- horizontal: add to pool or resources, unlimited
-- e.g. Cassandra & MongoDB
- vertical: add more power to existing resources, limited
-- e.g. MySQL

Manageability
- simplicity and speed with which a system can be reparied or maintained
- affects availability
- ease of diagnosing/understanding problems
- ease of updating/modifying
- ease of operation
- early detection of faults

Efficiency
- latency/response time: delay to obtain first item
-- corresponds to number of messages send by system nodes
- throughput/bandwidth: number of items delivered in given time unit
-- message size

Availability
- percentage of time operational

Reliability
- probability a system will fail in a given period
- system keeps delivering services despite component (hardware or software) failure

SDI
READ HDR

1. Requirements clarification
- functionality and performance
2. API definition (system interface)
3. Estimation
- scale (actions per sec, DAU), storage (***how to do***), bandwidth (***how to do***)
4. Data Model
5. High-level design
6. Detailed design (with pro's / con's)
7. Resolve Bottlenecks

__Elements__

Cache, CAP, ConsisHash, HTTP, Idx, LB, Proxies, Qs, Redund&Repl, Sql/NoSql, Sharding
ajax, long poll, sockets, sse's

_1. Load Balancer_
Possible places: Client <-> [LB] <-> Web Server <-> [LB] <-> App/Cache Server <-> [LB] <-> DB

LB monitor worker health by regularly attempting to connect; only healthy workers are given work

Methods/Algorithms:
- least connection: fewest active connections (useful for large num persistent connections)
- least response time: fewest active connection and lowest average response time
- least bandwith: server serving least amount of traffic
- round robin:
- weighted round robin: servers assigned weights, higher weighted receive new connections first and in greater number
- IP hash:

Redudant Load Balancers: second load balancer avoids single point of failure, both monitor each other

_2. Caching_ (left off)
 - many requests, db too slow
  - App server cache, works for small number of nodes, but then cache missing increase
  - Distributed cache, sharded by consistent hashing, how to handle missing nodes?
  - Global cache, every goes to a fast piece of hardware, either cache retrieves misses
     OR requesters retrieve misses (good when files are large or cache's elements must be static)
  - CDN for large amount of static media

 - Invalidation, write-through, write-around, write-back
-- write-through, cache and DB
-- write-around, DB only
-- write-back, cache only, periodically write to DB

 - Eviction, FIFO, LIFO, LRU, MRU, LFU, RR
 -- TTL cache, first in first out, least recently used

3. Sharding / Partitioning
- too much data
- partitioning - split by rows on single schema, sharding split across multiple machines
- splitting: horizontal, vertical, directory-based
- assignment: hash, list, RR, combo
- problems:
-- joins slow and denormalized tables inconsistent
-- referencial integrity / FKs breaks; requires app code or cleanup SQL
-- rebalancing, can solved with replicated directory-based partitioning

4. Indexes: speeds read queries, slows other ops

5. Proxies: filters, collapse forwarding

6. Queues: asynchrony decouples indeterminate processing like writes

7. Redundancy (failover) and replication (duplication)

8. SQL vs. NoSQL
- SQL: ACID & structured
- NoSQL: Large volume, cloud computing, rapid development
- NoSQL types: Key-Value stores, Document db, Wide-Column, Graph database

9. CAP - choose availability (always functional) or consistency (all users see same data) under network partition (communication failure)

10. Consistent hashing - assign nodes to a bucket of integers in modular space, minimizes key-to-server remaps when adding or removing a node.
can also split these buckets evenly across the modular space so hash function mixes well

11. HTTP
AJAX polling: back-and-forth
long-poll: client waits on hold
websockets: duplex
SSEs: once to server, many to client

Key characteristics of Distributed Systems - REMS
- Reliability
- Efficiency (response time / throughput; # messages sent & message size)
- Manageability
- Scalability

